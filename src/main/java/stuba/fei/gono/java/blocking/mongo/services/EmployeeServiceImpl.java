package stuba.fei.gono.java.blocking.mongo.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import stuba.fei.gono.java.blocking.mongo.repositories.EmployeeRepository;
import stuba.fei.gono.java.pojo.Employee;
import stuba.fei.gono.java.blocking.services.EmployeeService;

import javax.validation.Valid;
import java.util.Optional;

/***
 * <div class="en">Implementation of EmployeeService using CRUD operations and auto generated instance of
 * EmployeeRepository. Uses NextSequenceService instance for generating new ids to save entities.</div>
 * <div class="sk">Implementácia rozhrania EmployeeService pomocou CRUD operácií a automaticky generovanej
 * inštancie rozhrania EmployeeRepository. Na generáciu id pri ukladaní nových entít využíva inštanciu
 * triedy NextSequenceService.</div>
 * @see EmployeeRepository
 * @see NextSequenceService
 */
@Service
public class EmployeeServiceImpl implements EmployeeService {



    private EmployeeRepository employeeRepository;
    private NextSequenceService nextSequenceService;
    /***
     * <div class="en">Name of the sequence that stores data for generating new id.</div>
     * <div class="sk">Názov sekvencie, ktorá uchováva informáciu potrebnú na generáciu nového id.</div>
     */
    @Value("${reportedOverlimitTransaction.employee.sequenceName:employeeSequence}")
    private String sequenceName;
    /***
     * <div class="en">Password encoder used to store salted and hashed passwords.</div>
     * <div class="sk">Kódovač hesiel na ukladanie hašovaných hesiel s tzv. "salt-om".</div>
     */
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    @Autowired
    public EmployeeServiceImpl(EmployeeRepository employeeRepository, NextSequenceService nextSequenceService,
                               BCryptPasswordEncoder bCryptPasswordEncoder)
    {
        this.employeeRepository = employeeRepository;
        this.nextSequenceService = nextSequenceService;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }

    @Override
    public Optional<Employee> findEmployeeByUsername(String userName) {
        return employeeRepository.findEmployeeByUsername(userName);
    }

    @Override
    public Optional<Employee> getEmployeeById(String id) {
        return employeeRepository.findById(id);
    }

    /***
     *  <div class="en">Hashes password of employee using BCrypt and saves the entity
     *  into the repository with id generated by NextSequenceService.</div>
     *  <div class="sk">Hašuje heslo entity pomocou CBrypt algoritmu a uloží entitu s id
     *  generovaným inštanciou triedy NextSequenceService.</div>
     * @param employee <div class="en">entity to be saved.</div>
     *                 <div class="sk">entita na uloženie.</div>
     * @return <div class="en">true if entity was saved, false if entity with the same username
     * is already present in the repository.</div>
     * <div class="sk">true, ak entita bola uložená, false, ak entita s rovnakým používateľským menom už existuje.
     * </div>
     */
    @Override
    public Employee saveEmployee(@Valid Employee employee) {
        if(employeeRepository.existsByUsername(employee.getUsername()))
        {
            return null;
        }
        employee.setId(nextSequenceService.getNewId(employeeRepository,sequenceName));
        //e.setUserName(userName);
        employee.setPassword(bCryptPasswordEncoder.encode(employee.getPassword()));
        return employeeRepository.save(employee);
    }

    @Override
    public boolean existsByUsername(String username) {
        return employeeRepository.existsByUsername(username);
    }
}
